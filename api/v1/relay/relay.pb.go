// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relay/relay.proto

package relay

import (
	context "context"
	fmt "fmt"
	flow "github.com/cilium/cilium/api/v1/flow"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Flow from public import flow/flow.proto
type Flow = flow.Flow

// Layer4 from public import flow/flow.proto
type Layer4 = flow.Layer4
type Layer4_TCP = flow.Layer4_TCP
type Layer4_UDP = flow.Layer4_UDP
type Layer4_ICMPv4 = flow.Layer4_ICMPv4
type Layer4_ICMPv6 = flow.Layer4_ICMPv6

// Layer7 from public import flow/flow.proto
type Layer7 = flow.Layer7
type Layer7_Dns = flow.Layer7_Dns
type Layer7_Http = flow.Layer7_Http
type Layer7_Kafka = flow.Layer7_Kafka

// Endpoint from public import flow/flow.proto
type Endpoint = flow.Endpoint

// TCP from public import flow/flow.proto
type TCP = flow.TCP

// IP from public import flow/flow.proto
type IP = flow.IP

// Ethernet from public import flow/flow.proto
type Ethernet = flow.Ethernet

// TCPFlags from public import flow/flow.proto
type TCPFlags = flow.TCPFlags

// UDP from public import flow/flow.proto
type UDP = flow.UDP

// ICMPv4 from public import flow/flow.proto
type ICMPv4 = flow.ICMPv4

// ICMPv6 from public import flow/flow.proto
type ICMPv6 = flow.ICMPv6

// EventTypeFilter from public import flow/flow.proto
type EventTypeFilter = flow.EventTypeFilter

// CiliumEventType from public import flow/flow.proto
type CiliumEventType = flow.CiliumEventType

// FlowFilter from public import flow/flow.proto
type FlowFilter = flow.FlowFilter

// Payload from public import flow/flow.proto
type Payload = flow.Payload

// DNS from public import flow/flow.proto
type DNS = flow.DNS

// HTTPHeader from public import flow/flow.proto
type HTTPHeader = flow.HTTPHeader

// HTTP from public import flow/flow.proto
type HTTP = flow.HTTP

// Kafka from public import flow/flow.proto
type Kafka = flow.Kafka

// Service from public import flow/flow.proto
type Service = flow.Service

// FlowType from public import flow/flow.proto
type FlowType = flow.FlowType

var FlowType_name = flow.FlowType_name
var FlowType_value = flow.FlowType_value

const FlowType_UNKNOWN_TYPE = FlowType(flow.FlowType_UNKNOWN_TYPE)
const FlowType_L3_L4 = FlowType(flow.FlowType_L3_L4)
const FlowType_L7 = FlowType(flow.FlowType_L7)

// L7FlowType from public import flow/flow.proto
type L7FlowType = flow.L7FlowType

var L7FlowType_name = flow.L7FlowType_name
var L7FlowType_value = flow.L7FlowType_value

const L7FlowType_UNKNOWN_L7_TYPE = L7FlowType(flow.L7FlowType_UNKNOWN_L7_TYPE)
const L7FlowType_REQUEST = L7FlowType(flow.L7FlowType_REQUEST)
const L7FlowType_RESPONSE = L7FlowType(flow.L7FlowType_RESPONSE)
const L7FlowType_SAMPLE = L7FlowType(flow.L7FlowType_SAMPLE)

// IPVersion from public import flow/flow.proto
type IPVersion = flow.IPVersion

var IPVersion_name = flow.IPVersion_name
var IPVersion_value = flow.IPVersion_value

const IPVersion_IP_NOT_USED = IPVersion(flow.IPVersion_IP_NOT_USED)
const IPVersion_IPv4 = IPVersion(flow.IPVersion_IPv4)
const IPVersion_IPv6 = IPVersion(flow.IPVersion_IPv6)

// Verdict from public import flow/flow.proto
type Verdict = flow.Verdict

var Verdict_name = flow.Verdict_name
var Verdict_value = flow.Verdict_value

const Verdict_VERDICT_UNKNOWN = Verdict(flow.Verdict_VERDICT_UNKNOWN)
const Verdict_FORWARDED = Verdict(flow.Verdict_FORWARDED)
const Verdict_DROPPED = Verdict(flow.Verdict_DROPPED)
const Verdict_ERROR = Verdict(flow.Verdict_ERROR)

// TrafficDirection from public import flow/flow.proto
type TrafficDirection = flow.TrafficDirection

var TrafficDirection_name = flow.TrafficDirection_name
var TrafficDirection_value = flow.TrafficDirection_value

const TrafficDirection_TRAFFIC_DIRECTION_UNKNOWN = TrafficDirection(flow.TrafficDirection_TRAFFIC_DIRECTION_UNKNOWN)
const TrafficDirection_INGRESS = TrafficDirection(flow.TrafficDirection_INGRESS)
const TrafficDirection_EGRESS = TrafficDirection(flow.TrafficDirection_EGRESS)

// EventType from public import flow/flow.proto
type EventType = flow.EventType

var EventType_name = flow.EventType_name
var EventType_value = flow.EventType_value

const EventType_UNKNOWN = EventType(flow.EventType_UNKNOWN)
const EventType_EventSample = EventType(flow.EventType_EventSample)
const EventType_RecordLost = EventType(flow.EventType_RecordLost)

type EventType int32

const (
	EventType_UNKNOWN_EVENT       EventType = 0
	EventType_FLOW                EventType = 1
	EventType_K8S_NAMESPACE_STATE EventType = 2
	EventType_SERVICE_STATE       EventType = 3
	EventType_SERVICE_LINK_STATE  EventType = 4
)

var EventType_name = map[int32]string{
	0: "UNKNOWN_EVENT",
	1: "FLOW",
	2: "K8S_NAMESPACE_STATE",
	3: "SERVICE_STATE",
	4: "SERVICE_LINK_STATE",
}

var EventType_value = map[string]int32{
	"UNKNOWN_EVENT":       0,
	"FLOW":                1,
	"K8S_NAMESPACE_STATE": 2,
	"SERVICE_STATE":       3,
	"SERVICE_LINK_STATE":  4,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{0}
}

// IP protocols. The values of enums do not correspond to actual IP protocol numbers.
type IPProtocol int32

const (
	IPProtocol_UNKNOWN_IP_PROTOCOL IPProtocol = 0
	IPProtocol_TCP                 IPProtocol = 1
	IPProtocol_UDP                 IPProtocol = 2
	IPProtocol_ICMP_V4             IPProtocol = 3
	IPProtocol_ICMP_V6             IPProtocol = 4
)

var IPProtocol_name = map[int32]string{
	0: "UNKNOWN_IP_PROTOCOL",
	1: "TCP",
	2: "UDP",
	3: "ICMP_V4",
	4: "ICMP_V6",
}

var IPProtocol_value = map[string]int32{
	"UNKNOWN_IP_PROTOCOL": 0,
	"TCP":                 1,
	"UDP":                 2,
	"ICMP_V4":             3,
	"ICMP_V6":             4,
}

func (x IPProtocol) String() string {
	return proto.EnumName(IPProtocol_name, int32(x))
}

func (IPProtocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{1}
}

type StateChange int32

const (
	StateChange_UNKNOWN_STATE_CHANGE StateChange = 0
	StateChange_ADDED                StateChange = 1
	StateChange_MODIFIED             StateChange = 2
	StateChange_DELETED              StateChange = 3
	// This is needed in case the relay server knows that the service exists,
	// but it doesn't know when it got created.
	StateChange_EXISTS StateChange = 4
)

var StateChange_name = map[int32]string{
	0: "UNKNOWN_STATE_CHANGE",
	1: "ADDED",
	2: "MODIFIED",
	3: "DELETED",
	4: "EXISTS",
}

var StateChange_value = map[string]int32{
	"UNKNOWN_STATE_CHANGE": 0,
	"ADDED":                1,
	"MODIFIED":             2,
	"DELETED":              3,
	"EXISTS":               4,
}

func (x StateChange) String() string {
	return proto.EnumName(StateChange_name, int32(x))
}

func (StateChange) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{2}
}

// Here I didn't include "follow", "until", and "number". This request assumes follow,
// and lets the client decide when to end the request, whether it's based on timestamp
// or the number of responses received.
type GetEventsRequest struct {
	// EventType specifies which types of events to subscribe to. If unspecified, the
	// request is subscribed to all the event types.
	EventTypes           []EventType          `protobuf:"varint,1,rep,packed,name=event_types,json=eventTypes,proto3,enum=relay.EventType" json:"event_types,omitempty"`
	Blacklist            []*EventFilter       `protobuf:"bytes,2,rep,name=blacklist,proto3" json:"blacklist,omitempty"`
	Whitelist            []*EventFilter       `protobuf:"bytes,3,rep,name=whitelist,proto3" json:"whitelist,omitempty"`
	Since                *timestamp.Timestamp `protobuf:"bytes,4,opt,name=since,proto3" json:"since,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetEventsRequest) Reset()         { *m = GetEventsRequest{} }
func (m *GetEventsRequest) String() string { return proto.CompactTextString(m) }
func (*GetEventsRequest) ProtoMessage()    {}
func (*GetEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{0}
}

func (m *GetEventsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEventsRequest.Unmarshal(m, b)
}
func (m *GetEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEventsRequest.Marshal(b, m, deterministic)
}
func (m *GetEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEventsRequest.Merge(m, src)
}
func (m *GetEventsRequest) XXX_Size() int {
	return xxx_messageInfo_GetEventsRequest.Size(m)
}
func (m *GetEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEventsRequest proto.InternalMessageInfo

func (m *GetEventsRequest) GetEventTypes() []EventType {
	if m != nil {
		return m.EventTypes
	}
	return nil
}

func (m *GetEventsRequest) GetBlacklist() []*EventFilter {
	if m != nil {
		return m.Blacklist
	}
	return nil
}

func (m *GetEventsRequest) GetWhitelist() []*EventFilter {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

func (m *GetEventsRequest) GetSince() *timestamp.Timestamp {
	if m != nil {
		return m.Since
	}
	return nil
}

type GetEventsResponse struct {
	Node      string               `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*GetEventsResponse_Flow
	//	*GetEventsResponse_K8SNamespaceState
	//	*GetEventsResponse_ServiceState
	//	*GetEventsResponse_ServiceLinkState
	Event                isGetEventsResponse_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetEventsResponse) Reset()         { *m = GetEventsResponse{} }
func (m *GetEventsResponse) String() string { return proto.CompactTextString(m) }
func (*GetEventsResponse) ProtoMessage()    {}
func (*GetEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{1}
}

func (m *GetEventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEventsResponse.Unmarshal(m, b)
}
func (m *GetEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEventsResponse.Marshal(b, m, deterministic)
}
func (m *GetEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEventsResponse.Merge(m, src)
}
func (m *GetEventsResponse) XXX_Size() int {
	return xxx_messageInfo_GetEventsResponse.Size(m)
}
func (m *GetEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetEventsResponse proto.InternalMessageInfo

func (m *GetEventsResponse) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *GetEventsResponse) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type isGetEventsResponse_Event interface {
	isGetEventsResponse_Event()
}

type GetEventsResponse_Flow struct {
	Flow *flow.Flow `protobuf:"bytes,3,opt,name=flow,proto3,oneof"`
}

type GetEventsResponse_K8SNamespaceState struct {
	K8SNamespaceState *K8SNamespaceState `protobuf:"bytes,4,opt,name=k8s_namespace_state,json=k8sNamespaceState,proto3,oneof"`
}

type GetEventsResponse_ServiceState struct {
	ServiceState *ServiceState `protobuf:"bytes,5,opt,name=service_state,json=serviceState,proto3,oneof"`
}

type GetEventsResponse_ServiceLinkState struct {
	ServiceLinkState *ServiceLinkState `protobuf:"bytes,6,opt,name=service_link_state,json=serviceLinkState,proto3,oneof"`
}

func (*GetEventsResponse_Flow) isGetEventsResponse_Event() {}

func (*GetEventsResponse_K8SNamespaceState) isGetEventsResponse_Event() {}

func (*GetEventsResponse_ServiceState) isGetEventsResponse_Event() {}

func (*GetEventsResponse_ServiceLinkState) isGetEventsResponse_Event() {}

func (m *GetEventsResponse) GetEvent() isGetEventsResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *GetEventsResponse) GetFlow() *flow.Flow {
	if x, ok := m.GetEvent().(*GetEventsResponse_Flow); ok {
		return x.Flow
	}
	return nil
}

func (m *GetEventsResponse) GetK8SNamespaceState() *K8SNamespaceState {
	if x, ok := m.GetEvent().(*GetEventsResponse_K8SNamespaceState); ok {
		return x.K8SNamespaceState
	}
	return nil
}

func (m *GetEventsResponse) GetServiceState() *ServiceState {
	if x, ok := m.GetEvent().(*GetEventsResponse_ServiceState); ok {
		return x.ServiceState
	}
	return nil
}

func (m *GetEventsResponse) GetServiceLinkState() *ServiceLinkState {
	if x, ok := m.GetEvent().(*GetEventsResponse_ServiceLinkState); ok {
		return x.ServiceLinkState
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GetEventsResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GetEventsResponse_Flow)(nil),
		(*GetEventsResponse_K8SNamespaceState)(nil),
		(*GetEventsResponse_ServiceState)(nil),
		(*GetEventsResponse_ServiceLinkState)(nil),
	}
}

// Here I added different filter types for different events. Another option is to reuse
// and extend FlowFilter to filter all the events, but I worry that it might become too
// confusing in terms of figuring out which filter fields apply to which events.
type EventFilter struct {
	// Types that are valid to be assigned to Filter:
	//	*EventFilter_FlowFilter
	//	*EventFilter_ServiceFilter
	//	*EventFilter_ServiceLinkFilter
	Filter               isEventFilter_Filter `protobuf_oneof:"filter"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EventFilter) Reset()         { *m = EventFilter{} }
func (m *EventFilter) String() string { return proto.CompactTextString(m) }
func (*EventFilter) ProtoMessage()    {}
func (*EventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{2}
}

func (m *EventFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventFilter.Unmarshal(m, b)
}
func (m *EventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventFilter.Marshal(b, m, deterministic)
}
func (m *EventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFilter.Merge(m, src)
}
func (m *EventFilter) XXX_Size() int {
	return xxx_messageInfo_EventFilter.Size(m)
}
func (m *EventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_EventFilter proto.InternalMessageInfo

type isEventFilter_Filter interface {
	isEventFilter_Filter()
}

type EventFilter_FlowFilter struct {
	FlowFilter *flow.FlowFilter `protobuf:"bytes,2,opt,name=flow_filter,json=flowFilter,proto3,oneof"`
}

type EventFilter_ServiceFilter struct {
	ServiceFilter *ServiceFilter `protobuf:"bytes,3,opt,name=service_filter,json=serviceFilter,proto3,oneof"`
}

type EventFilter_ServiceLinkFilter struct {
	ServiceLinkFilter *ServiceLinkFilter `protobuf:"bytes,4,opt,name=service_link_filter,json=serviceLinkFilter,proto3,oneof"`
}

func (*EventFilter_FlowFilter) isEventFilter_Filter() {}

func (*EventFilter_ServiceFilter) isEventFilter_Filter() {}

func (*EventFilter_ServiceLinkFilter) isEventFilter_Filter() {}

func (m *EventFilter) GetFilter() isEventFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *EventFilter) GetFlowFilter() *flow.FlowFilter {
	if x, ok := m.GetFilter().(*EventFilter_FlowFilter); ok {
		return x.FlowFilter
	}
	return nil
}

func (m *EventFilter) GetServiceFilter() *ServiceFilter {
	if x, ok := m.GetFilter().(*EventFilter_ServiceFilter); ok {
		return x.ServiceFilter
	}
	return nil
}

func (m *EventFilter) GetServiceLinkFilter() *ServiceLinkFilter {
	if x, ok := m.GetFilter().(*EventFilter_ServiceLinkFilter); ok {
		return x.ServiceLinkFilter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EventFilter) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EventFilter_FlowFilter)(nil),
		(*EventFilter_ServiceFilter)(nil),
		(*EventFilter_ServiceLinkFilter)(nil),
	}
}

type K8SNamespace struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreationTimestamp    *timestamp.Timestamp `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *K8SNamespace) Reset()         { *m = K8SNamespace{} }
func (m *K8SNamespace) String() string { return proto.CompactTextString(m) }
func (*K8SNamespace) ProtoMessage()    {}
func (*K8SNamespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{3}
}

func (m *K8SNamespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8SNamespace.Unmarshal(m, b)
}
func (m *K8SNamespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8SNamespace.Marshal(b, m, deterministic)
}
func (m *K8SNamespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SNamespace.Merge(m, src)
}
func (m *K8SNamespace) XXX_Size() int {
	return xxx_messageInfo_K8SNamespace.Size(m)
}
func (m *K8SNamespace) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SNamespace.DiscardUnknown(m)
}

var xxx_messageInfo_K8SNamespace proto.InternalMessageInfo

func (m *K8SNamespace) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *K8SNamespace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *K8SNamespace) GetCreationTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.CreationTimestamp
	}
	return nil
}

type K8SNamespaceState struct {
	Namespace            *K8SNamespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Type                 StateChange   `protobuf:"varint,2,opt,name=type,proto3,enum=relay.StateChange" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *K8SNamespaceState) Reset()         { *m = K8SNamespaceState{} }
func (m *K8SNamespaceState) String() string { return proto.CompactTextString(m) }
func (*K8SNamespaceState) ProtoMessage()    {}
func (*K8SNamespaceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{4}
}

func (m *K8SNamespaceState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_K8SNamespaceState.Unmarshal(m, b)
}
func (m *K8SNamespaceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_K8SNamespaceState.Marshal(b, m, deterministic)
}
func (m *K8SNamespaceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K8SNamespaceState.Merge(m, src)
}
func (m *K8SNamespaceState) XXX_Size() int {
	return xxx_messageInfo_K8SNamespaceState.Size(m)
}
func (m *K8SNamespaceState) XXX_DiscardUnknown() {
	xxx_messageInfo_K8SNamespaceState.DiscardUnknown(m)
}

var xxx_messageInfo_K8SNamespaceState proto.InternalMessageInfo

func (m *K8SNamespaceState) GetNamespace() *K8SNamespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *K8SNamespaceState) GetType() StateChange {
	if m != nil {
		return m.Type
	}
	return StateChange_UNKNOWN_STATE_CHANGE
}

// Come up with a better name for Service.
type Service struct {
	// An opaque ID that uniquely identifies the service.
	Id                    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace             string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels                []string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	DnsNames              []string `protobuf:"bytes,5,rep,name=dns_names,json=dnsNames,proto3" json:"dns_names,omitempty"`
	EgressPolicyEnforced  bool     `protobuf:"varint,6,opt,name=egress_policy_enforced,json=egressPolicyEnforced,proto3" json:"egress_policy_enforced,omitempty"`
	IngressPolicyEnforced bool     `protobuf:"varint,7,opt,name=ingress_policy_enforced,json=ingressPolicyEnforced,proto3" json:"ingress_policy_enforced,omitempty"`
	// This is a string instead of boolean because Cilium reports status message. If it's
	// successfully enabled, this string is set to "OK" I think.
	VisibilityPolicyStatus string `protobuf:"bytes,8,opt,name=visibility_policy_status,json=visibilityPolicyStatus,proto3" json:"visibility_policy_status,omitempty"`
	// We probably can't reliably set creation timestamp.
	CreationTimestamp    *timestamp.Timestamp `protobuf:"bytes,9,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{5}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Service) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Service) GetDnsNames() []string {
	if m != nil {
		return m.DnsNames
	}
	return nil
}

func (m *Service) GetEgressPolicyEnforced() bool {
	if m != nil {
		return m.EgressPolicyEnforced
	}
	return false
}

func (m *Service) GetIngressPolicyEnforced() bool {
	if m != nil {
		return m.IngressPolicyEnforced
	}
	return false
}

func (m *Service) GetVisibilityPolicyStatus() string {
	if m != nil {
		return m.VisibilityPolicyStatus
	}
	return ""
}

func (m *Service) GetCreationTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.CreationTimestamp
	}
	return nil
}

type ServiceState struct {
	Service              *Service    `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Type                 StateChange `protobuf:"varint,2,opt,name=type,proto3,enum=relay.StateChange" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ServiceState) Reset()         { *m = ServiceState{} }
func (m *ServiceState) String() string { return proto.CompactTextString(m) }
func (*ServiceState) ProtoMessage()    {}
func (*ServiceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{6}
}

func (m *ServiceState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceState.Unmarshal(m, b)
}
func (m *ServiceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceState.Marshal(b, m, deterministic)
}
func (m *ServiceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceState.Merge(m, src)
}
func (m *ServiceState) XXX_Size() int {
	return xxx_messageInfo_ServiceState.Size(m)
}
func (m *ServiceState) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceState.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceState proto.InternalMessageInfo

func (m *ServiceState) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *ServiceState) GetType() StateChange {
	if m != nil {
		return m.Type
	}
	return StateChange_UNKNOWN_STATE_CHANGE
}

type ServiceFilter struct {
	Namespace            []string `protobuf:"bytes,1,rep,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceFilter) Reset()         { *m = ServiceFilter{} }
func (m *ServiceFilter) String() string { return proto.CompactTextString(m) }
func (*ServiceFilter) ProtoMessage()    {}
func (*ServiceFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{7}
}

func (m *ServiceFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceFilter.Unmarshal(m, b)
}
func (m *ServiceFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceFilter.Marshal(b, m, deterministic)
}
func (m *ServiceFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceFilter.Merge(m, src)
}
func (m *ServiceFilter) XXX_Size() int {
	return xxx_messageInfo_ServiceFilter.Size(m)
}
func (m *ServiceFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceFilter proto.InternalMessageInfo

func (m *ServiceFilter) GetNamespace() []string {
	if m != nil {
		return m.Namespace
	}
	return nil
}

type ServiceLink struct {
	// An opaque ID that uniquely identifies this link.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// source Service id
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// destination Service id
	DestinationId        string       `protobuf:"bytes,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	DestinationPort      uint32       `protobuf:"varint,4,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	IpProtocol           IPProtocol   `protobuf:"varint,5,opt,name=ip_protocol,json=ipProtocol,proto3,enum=relay.IPProtocol" json:"ip_protocol,omitempty"`
	Verdict              flow.Verdict `protobuf:"varint,6,opt,name=verdict,proto3,enum=flow.Verdict" json:"verdict,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ServiceLink) Reset()         { *m = ServiceLink{} }
func (m *ServiceLink) String() string { return proto.CompactTextString(m) }
func (*ServiceLink) ProtoMessage()    {}
func (*ServiceLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{8}
}

func (m *ServiceLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceLink.Unmarshal(m, b)
}
func (m *ServiceLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceLink.Marshal(b, m, deterministic)
}
func (m *ServiceLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceLink.Merge(m, src)
}
func (m *ServiceLink) XXX_Size() int {
	return xxx_messageInfo_ServiceLink.Size(m)
}
func (m *ServiceLink) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceLink.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceLink proto.InternalMessageInfo

func (m *ServiceLink) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ServiceLink) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *ServiceLink) GetDestinationId() string {
	if m != nil {
		return m.DestinationId
	}
	return ""
}

func (m *ServiceLink) GetDestinationPort() uint32 {
	if m != nil {
		return m.DestinationPort
	}
	return 0
}

func (m *ServiceLink) GetIpProtocol() IPProtocol {
	if m != nil {
		return m.IpProtocol
	}
	return IPProtocol_UNKNOWN_IP_PROTOCOL
}

func (m *ServiceLink) GetVerdict() flow.Verdict {
	if m != nil {
		return m.Verdict
	}
	return flow.Verdict_VERDICT_UNKNOWN
}

type ServiceLinkState struct {
	ServiceLink          *ServiceLink `protobuf:"bytes,1,opt,name=service_link,json=serviceLink,proto3" json:"service_link,omitempty"`
	Type                 StateChange  `protobuf:"varint,2,opt,name=type,proto3,enum=relay.StateChange" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ServiceLinkState) Reset()         { *m = ServiceLinkState{} }
func (m *ServiceLinkState) String() string { return proto.CompactTextString(m) }
func (*ServiceLinkState) ProtoMessage()    {}
func (*ServiceLinkState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{9}
}

func (m *ServiceLinkState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceLinkState.Unmarshal(m, b)
}
func (m *ServiceLinkState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceLinkState.Marshal(b, m, deterministic)
}
func (m *ServiceLinkState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceLinkState.Merge(m, src)
}
func (m *ServiceLinkState) XXX_Size() int {
	return xxx_messageInfo_ServiceLinkState.Size(m)
}
func (m *ServiceLinkState) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceLinkState.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceLinkState proto.InternalMessageInfo

func (m *ServiceLinkState) GetServiceLink() *ServiceLink {
	if m != nil {
		return m.ServiceLink
	}
	return nil
}

func (m *ServiceLinkState) GetType() StateChange {
	if m != nil {
		return m.Type
	}
	return StateChange_UNKNOWN_STATE_CHANGE
}

type ServiceLinkFilter struct {
	Source      []*ServiceFilter `protobuf:"bytes,1,rep,name=source,proto3" json:"source,omitempty"`
	Destination []*ServiceFilter `protobuf:"bytes,2,rep,name=destination,proto3" json:"destination,omitempty"`
	// Use string here to support things like port ranges (e.g. 100-200).
	DestinationPort      []string       `protobuf:"bytes,3,rep,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	Verdict              []flow.Verdict `protobuf:"varint,4,rep,packed,name=verdict,proto3,enum=flow.Verdict" json:"verdict,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ServiceLinkFilter) Reset()         { *m = ServiceLinkFilter{} }
func (m *ServiceLinkFilter) String() string { return proto.CompactTextString(m) }
func (*ServiceLinkFilter) ProtoMessage()    {}
func (*ServiceLinkFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6da3b5c0d1535b3, []int{10}
}

func (m *ServiceLinkFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceLinkFilter.Unmarshal(m, b)
}
func (m *ServiceLinkFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceLinkFilter.Marshal(b, m, deterministic)
}
func (m *ServiceLinkFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceLinkFilter.Merge(m, src)
}
func (m *ServiceLinkFilter) XXX_Size() int {
	return xxx_messageInfo_ServiceLinkFilter.Size(m)
}
func (m *ServiceLinkFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceLinkFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceLinkFilter proto.InternalMessageInfo

func (m *ServiceLinkFilter) GetSource() []*ServiceFilter {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ServiceLinkFilter) GetDestination() []*ServiceFilter {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *ServiceLinkFilter) GetDestinationPort() []string {
	if m != nil {
		return m.DestinationPort
	}
	return nil
}

func (m *ServiceLinkFilter) GetVerdict() []flow.Verdict {
	if m != nil {
		return m.Verdict
	}
	return nil
}

func init() {
	proto.RegisterEnum("relay.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("relay.IPProtocol", IPProtocol_name, IPProtocol_value)
	proto.RegisterEnum("relay.StateChange", StateChange_name, StateChange_value)
	proto.RegisterType((*GetEventsRequest)(nil), "relay.GetEventsRequest")
	proto.RegisterType((*GetEventsResponse)(nil), "relay.GetEventsResponse")
	proto.RegisterType((*EventFilter)(nil), "relay.EventFilter")
	proto.RegisterType((*K8SNamespace)(nil), "relay.K8sNamespace")
	proto.RegisterType((*K8SNamespaceState)(nil), "relay.K8sNamespaceState")
	proto.RegisterType((*Service)(nil), "relay.Service")
	proto.RegisterType((*ServiceState)(nil), "relay.ServiceState")
	proto.RegisterType((*ServiceFilter)(nil), "relay.ServiceFilter")
	proto.RegisterType((*ServiceLink)(nil), "relay.ServiceLink")
	proto.RegisterType((*ServiceLinkState)(nil), "relay.ServiceLinkState")
	proto.RegisterType((*ServiceLinkFilter)(nil), "relay.ServiceLinkFilter")
}

func init() { proto.RegisterFile("relay/relay.proto", fileDescriptor_b6da3b5c0d1535b3) }

var fileDescriptor_b6da3b5c0d1535b3 = []byte{
	// 1089 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5f, 0x4f, 0xe3, 0x46,
	0x10, 0x8f, 0xe3, 0xfc, 0x1d, 0x93, 0x9c, 0x33, 0x5c, 0x39, 0x8b, 0xab, 0xd4, 0x28, 0x52, 0xdb,
	0x14, 0xb5, 0x81, 0xcb, 0x5d, 0x11, 0xaa, 0xd4, 0x07, 0x48, 0x0c, 0xe4, 0x80, 0x24, 0xe7, 0xe4,
	0xb8, 0xf6, 0xc9, 0x75, 0xe2, 0x85, 0x5b, 0x61, 0xec, 0x9c, 0xd7, 0x80, 0x78, 0xe8, 0x47, 0xec,
	0x73, 0x1f, 0xaa, 0x7e, 0x80, 0x3e, 0xf7, 0x0b, 0x54, 0x5e, 0xaf, 0x1d, 0x27, 0x01, 0x1d, 0xea,
	0x8b, 0xe5, 0x9d, 0x99, 0xdf, 0x78, 0xe7, 0xf7, 0x9b, 0x59, 0x2f, 0xd4, 0x7c, 0xe2, 0x58, 0xf7,
	0xdb, 0xfc, 0xd9, 0x9a, 0xf9, 0x5e, 0xe0, 0x61, 0x9e, 0x2f, 0x36, 0xbf, 0xba, 0xf4, 0xbc, 0x4b,
	0x87, 0x6c, 0x73, 0xe3, 0xe4, 0xe6, 0x62, 0x3b, 0xa0, 0xd7, 0x84, 0x05, 0xd6, 0xf5, 0x2c, 0x8a,
	0xdb, 0x7c, 0x76, 0xe1, 0x78, 0x77, 0xdb, 0xe1, 0x23, 0x32, 0x34, 0xfe, 0x92, 0x40, 0x3d, 0x22,
	0x81, 0x7e, 0x4b, 0xdc, 0x80, 0x19, 0xe4, 0xd3, 0x0d, 0x61, 0x01, 0xbe, 0x02, 0x85, 0x84, 0x06,
	0x33, 0xb8, 0x9f, 0x11, 0xa6, 0x49, 0x75, 0xb9, 0x59, 0x6d, 0xab, 0xad, 0xe8, 0x83, 0x3c, 0x74,
	0x7c, 0x3f, 0x23, 0x06, 0x90, 0xf8, 0x95, 0xe1, 0x0e, 0x94, 0x27, 0x8e, 0x35, 0xbd, 0x72, 0x28,
	0x0b, 0xb4, 0x6c, 0x5d, 0x6e, 0x2a, 0x6d, 0x4c, 0x03, 0x0e, 0xa9, 0x13, 0x10, 0xdf, 0x98, 0x07,
	0x85, 0x88, 0xbb, 0x8f, 0x34, 0x20, 0x1c, 0x21, 0x3f, 0x8e, 0x48, 0x82, 0x70, 0x07, 0xf2, 0x8c,
	0xba, 0x53, 0xa2, 0xe5, 0xea, 0x52, 0x53, 0x69, 0x6f, 0xb6, 0xa2, 0x6a, 0x5b, 0x71, 0xb5, 0xad,
	0x71, 0x5c, 0xad, 0x11, 0x05, 0x36, 0xfe, 0xce, 0x42, 0x2d, 0x55, 0x1d, 0x9b, 0x79, 0x2e, 0x23,
	0x88, 0x90, 0x73, 0x3d, 0x9b, 0x68, 0x52, 0x5d, 0x6a, 0x96, 0x0d, 0xfe, 0x8e, 0x7b, 0x50, 0x4e,
	0xb8, 0xd2, 0xb2, 0x9f, 0xcd, 0x3f, 0x0f, 0xc6, 0x3a, 0xe4, 0x42, 0x3e, 0x35, 0x99, 0x83, 0xa0,
	0xc5, 0xc9, 0x3d, 0x74, 0xbc, 0xbb, 0xe3, 0x8c, 0xc1, 0x3d, 0xf8, 0x16, 0xd6, 0xaf, 0xf6, 0x98,
	0xe9, 0x5a, 0xd7, 0x84, 0xcd, 0xac, 0x29, 0x31, 0x59, 0x60, 0x05, 0x71, 0x15, 0x9a, 0xa8, 0xf9,
	0x64, 0x8f, 0xf5, 0xe3, 0x80, 0x51, 0xe8, 0x3f, 0xce, 0x18, 0xb5, 0xab, 0x65, 0x23, 0xfe, 0x04,
	0x15, 0x46, 0xfc, 0x5b, 0x9a, 0x64, 0xc9, 0xf3, 0x2c, 0xeb, 0x22, 0xcb, 0x28, 0xf2, 0xc5, 0x09,
	0xd6, 0x58, 0x6a, 0x8d, 0x47, 0x80, 0x31, 0xd6, 0xa1, 0xee, 0x95, 0x48, 0x50, 0xe0, 0x09, 0x5e,
	0x2c, 0x26, 0x38, 0xa5, 0xee, 0x55, 0x9c, 0x44, 0x65, 0x4b, 0xb6, 0x83, 0x22, 0xe4, 0xb9, 0xf4,
	0x8d, 0x3f, 0x25, 0x50, 0x52, 0x62, 0xe1, 0x6b, 0x50, 0xc2, 0x8a, 0xcd, 0x0b, 0xbe, 0x14, 0x3c,
	0xaa, 0x73, 0x4a, 0xa2, 0xb0, 0xe3, 0x8c, 0x01, 0x17, 0xc9, 0x0a, 0x7f, 0x86, 0x6a, 0xbc, 0x2d,
	0x81, 0x8b, 0xa8, 0x7c, 0xbe, 0xb8, 0xa5, 0x04, 0x1b, 0x13, 0x20, 0xe0, 0x6f, 0x61, 0x7d, 0xa1,
	0x2a, 0x91, 0x63, 0x91, 0xdd, 0x54, 0x59, 0x49, 0x9e, 0x1a, 0x5b, 0x36, 0x1e, 0x94, 0xa0, 0x10,
	0xc1, 0x1b, 0xbf, 0xc3, 0x5a, 0x5a, 0x11, 0xac, 0x42, 0x96, 0xda, 0xa2, 0x63, 0xb2, 0xd4, 0xe6,
	0x3d, 0x64, 0x5d, 0x13, 0x5e, 0x62, 0xd8, 0x43, 0xd6, 0x35, 0xc1, 0x1e, 0xe0, 0xd4, 0x27, 0x56,
	0x40, 0x3d, 0xd7, 0x9c, 0x37, 0x93, 0xfc, 0xd9, 0x66, 0xaa, 0xc5, 0xa8, 0xc4, 0xd4, 0x70, 0xa1,
	0xb6, 0xd2, 0x10, 0xf8, 0x0a, 0xca, 0x49, 0x0f, 0xf1, 0xad, 0xcc, 0x75, 0x4f, 0x07, 0x1b, 0xf3,
	0x28, 0xfc, 0x06, 0x72, 0xe1, 0x0c, 0xf3, 0x6d, 0x56, 0x93, 0xf9, 0xe2, 0xe9, 0x3a, 0x1f, 0x2d,
	0xf7, 0x92, 0x18, 0xdc, 0xdf, 0xf8, 0x37, 0x0b, 0x45, 0xc1, 0xd1, 0x93, 0x4a, 0xfd, 0x32, 0xbd,
	0x15, 0x99, 0x3b, 0x52, 0x5f, 0xdd, 0x80, 0x82, 0x63, 0x4d, 0x88, 0xc3, 0xb4, 0x5c, 0x5d, 0x6e,
	0x96, 0x0d, 0xb1, 0xc2, 0x97, 0x50, 0xb6, 0x5d, 0x31, 0x08, 0x5a, 0x9e, 0xbb, 0x4a, 0xb6, 0x1b,
	0xed, 0x1c, 0xdf, 0xc0, 0x06, 0xb9, 0xf4, 0x09, 0x63, 0xe6, 0xcc, 0x73, 0xe8, 0xf4, 0xde, 0x24,
	0xee, 0x85, 0xe7, 0x4f, 0x89, 0xcd, 0x3b, 0xb4, 0x64, 0x3c, 0x8f, 0xbc, 0x43, 0xee, 0xd4, 0x85,
	0x0f, 0x77, 0xe1, 0x05, 0x75, 0x1f, 0x86, 0x15, 0x39, 0xec, 0x0b, 0xe1, 0x5e, 0xc2, 0xed, 0x81,
	0x76, 0x4b, 0x19, 0x9d, 0x50, 0x87, 0x06, 0xf7, 0x31, 0x34, 0x1c, 0x88, 0x1b, 0xa6, 0x95, 0x78,
	0x3d, 0x1b, 0x73, 0x7f, 0x84, 0x1d, 0x71, 0xef, 0x23, 0x2a, 0x97, 0xff, 0x8f, 0xca, 0xbf, 0xc1,
	0x5a, 0x7a, 0x60, 0xb1, 0x09, 0x45, 0xd1, 0x93, 0x42, 0xde, 0xea, 0x62, 0xfb, 0x1a, 0xb1, 0xfb,
	0xc9, 0xba, 0xfe, 0x00, 0x95, 0x85, 0xf1, 0x59, 0x14, 0x4e, 0xe2, 0x12, 0xcc, 0x0d, 0x8d, 0x7f,
	0x24, 0x50, 0x52, 0xa3, 0xb2, 0xd2, 0x0a, 0x2f, 0xa1, 0xcc, 0xbc, 0x1b, 0x7f, 0x4a, 0x4c, 0x6a,
	0x8b, 0x7e, 0x28, 0x45, 0x86, 0x9e, 0x8d, 0x5f, 0x43, 0xd5, 0x26, 0x2c, 0xa0, 0x6e, 0xc4, 0x0d,
	0xb5, 0x45, 0x63, 0x54, 0x52, 0xd6, 0x9e, 0x8d, 0xdf, 0x81, 0x9a, 0x0e, 0x9b, 0x79, 0x7e, 0xc0,
	0x87, 0xb5, 0x62, 0x3c, 0x4b, 0xd9, 0x87, 0x9e, 0x1f, 0x60, 0x1b, 0x14, 0x3a, 0x33, 0x39, 0x97,
	0x53, 0xcf, 0xe1, 0x47, 0x5d, 0xb5, 0x5d, 0x13, 0xc5, 0xf6, 0x86, 0x43, 0xe1, 0x30, 0x80, 0xce,
	0xe2, 0x77, 0xfc, 0x16, 0x8a, 0xb7, 0xc4, 0xb7, 0xe9, 0x34, 0xe0, 0x7d, 0x53, 0x6d, 0x57, 0xa2,
	0xe3, 0xe7, 0x3c, 0x32, 0x1a, 0xb1, 0xb7, 0xf1, 0x09, 0xd4, 0xe5, 0xc3, 0x0e, 0x7f, 0x84, 0xb5,
	0xf4, 0x59, 0x22, 0x54, 0xc0, 0xd5, 0x43, 0xc4, 0x50, 0x52, 0x87, 0xc7, 0x93, 0xd5, 0xf8, 0x43,
	0x82, 0xda, 0xca, 0x49, 0x84, 0xdf, 0x43, 0x21, 0xe2, 0x90, 0xeb, 0xf1, 0xc8, 0xb9, 0x67, 0x88,
	0x18, 0xdc, 0x05, 0x25, 0x45, 0x93, 0xf8, 0xd5, 0x3e, 0x0c, 0x49, 0x07, 0x3e, 0x48, 0xbb, 0xcc,
	0xf5, 0x5f, 0xa1, 0x3d, 0x45, 0x61, 0x8e, 0xff, 0xfa, 0x1f, 0xa1, 0x70, 0xcb, 0x81, 0x72, 0x72,
	0x1b, 0xc0, 0x1a, 0x54, 0xde, 0xf7, 0x4f, 0xfa, 0x83, 0x0f, 0x7d, 0x53, 0x3f, 0xd7, 0xfb, 0x63,
	0x35, 0x83, 0x25, 0xc8, 0x1d, 0x9e, 0x0e, 0x3e, 0xa8, 0x12, 0xbe, 0x80, 0xf5, 0x93, 0xbd, 0x91,
	0xd9, 0xdf, 0x3f, 0xd3, 0x47, 0xc3, 0xfd, 0x8e, 0x6e, 0x8e, 0xc6, 0xfb, 0x63, 0x5d, 0xcd, 0x86,
	0xa8, 0x91, 0x6e, 0x9c, 0xf7, 0x12, 0x93, 0x8c, 0x1b, 0x80, 0xb1, 0xe9, 0xb4, 0xd7, 0x3f, 0x11,
	0xf6, 0xdc, 0xd6, 0x3b, 0x80, 0xb9, 0xe6, 0x61, 0xc6, 0xf8, 0x73, 0xbd, 0xa1, 0x39, 0x34, 0x06,
	0xe3, 0x41, 0x67, 0x70, 0xaa, 0x66, 0xb0, 0x08, 0xf2, 0xb8, 0x33, 0x54, 0xa5, 0xf0, 0xe5, 0x7d,
	0x77, 0xa8, 0x66, 0x51, 0x81, 0x62, 0xaf, 0x73, 0x36, 0x34, 0xcf, 0xdf, 0xa8, 0xf2, 0x7c, 0xb1,
	0xab, 0xe6, 0xb6, 0x7e, 0x05, 0x25, 0xa5, 0x12, 0x6a, 0xf0, 0x3c, 0xce, 0xc9, 0x3f, 0x6a, 0x76,
	0x8e, 0xf7, 0xfb, 0x47, 0xba, 0x9a, 0xc1, 0x32, 0xe4, 0xf7, 0xbb, 0x5d, 0xbd, 0xab, 0x4a, 0xb8,
	0x06, 0xa5, 0xb3, 0x41, 0xb7, 0x77, 0xd8, 0xd3, 0xbb, 0x51, 0xee, 0xae, 0x7e, 0xaa, 0x8f, 0xf5,
	0xae, 0x2a, 0x23, 0x40, 0x41, 0xff, 0xa5, 0x37, 0x1a, 0x8f, 0xd4, 0x5c, 0xfb, 0x1d, 0x28, 0xc7,
	0x37, 0x93, 0x89, 0x43, 0x8c, 0x50, 0x19, 0x3c, 0x80, 0x72, 0x72, 0x11, 0xc1, 0xf8, 0x67, 0xbb,
	0x7c, 0xf1, 0xda, 0xd4, 0x56, 0x1d, 0xd1, 0x9d, 0xa5, 0x91, 0xd9, 0x91, 0x86, 0xd2, 0xa4, 0xc0,
	0x67, 0xe1, 0xf5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x89, 0x69, 0x34, 0x02, 0x0a, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HubbleRelayClient is the client API for HubbleRelay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HubbleRelayClient interface {
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (HubbleRelay_GetEventsClient, error)
}

type hubbleRelayClient struct {
	cc *grpc.ClientConn
}

func NewHubbleRelayClient(cc *grpc.ClientConn) HubbleRelayClient {
	return &hubbleRelayClient{cc}
}

func (c *hubbleRelayClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (HubbleRelay_GetEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HubbleRelay_serviceDesc.Streams[0], "/relay.HubbleRelay/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubbleRelayGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HubbleRelay_GetEventsClient interface {
	Recv() (*GetEventsResponse, error)
	grpc.ClientStream
}

type hubbleRelayGetEventsClient struct {
	grpc.ClientStream
}

func (x *hubbleRelayGetEventsClient) Recv() (*GetEventsResponse, error) {
	m := new(GetEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HubbleRelayServer is the server API for HubbleRelay service.
type HubbleRelayServer interface {
	GetEvents(*GetEventsRequest, HubbleRelay_GetEventsServer) error
}

// UnimplementedHubbleRelayServer can be embedded to have forward compatible implementations.
type UnimplementedHubbleRelayServer struct {
}

func (*UnimplementedHubbleRelayServer) GetEvents(req *GetEventsRequest, srv HubbleRelay_GetEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}

func RegisterHubbleRelayServer(s *grpc.Server, srv HubbleRelayServer) {
	s.RegisterService(&_HubbleRelay_serviceDesc, srv)
}

func _HubbleRelay_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HubbleRelayServer).GetEvents(m, &hubbleRelayGetEventsServer{stream})
}

type HubbleRelay_GetEventsServer interface {
	Send(*GetEventsResponse) error
	grpc.ServerStream
}

type hubbleRelayGetEventsServer struct {
	grpc.ServerStream
}

func (x *hubbleRelayGetEventsServer) Send(m *GetEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _HubbleRelay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relay.HubbleRelay",
	HandlerType: (*HubbleRelayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _HubbleRelay_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "relay/relay.proto",
}
